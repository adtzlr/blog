{
  
    
        "post0": {
            "title": "How to install a Fortran Compiler for MSC.Marc",
            "content": "How to install a Fortran Compiler for MSC.Marc . In this post I’ll discuss all the necessary steps to install the Intel Fortran compiler for MSC.Marc. At first we have to find out the necessary tools to compile fortran subroutines on Windows. In every Release Guide of MSC.Marc there is a table which versions of the Intel Compiler are compatible. Make sure to download this specific versions as even newer compiler versions may lead to problems. For MSC.Marc 2016 the Fortran Version is Intel XE2015 and Microsoft Visual Studio 2013. Be sure to uninstall all versions of MSC.Marc before continuing with the following steps. . Installation . It is important to install the software tools in the following order. In this way we avoid problems that software B is not finding the required software A inside the registry. . Visual Studio 20xx . We start with installing Microsft Visual Studio 20xx. Go to the Visual Studio Download Page and search for visual studio community 20xx (older versions are easier to find with the exact search string). Download the installer and choose the Custom install option. As noted by Intel it is necessary to install Common Tools for Visual C++ 2015 which is not activated by default. Restart your Computer. . Intel XE20xx Composer . After the installation of Visual Studio is completed we proceed with the Fortran compiler by Intel. Search for the Intel Download Page (or, if you’re student visit this site) and download Intel Parallel Studio XE for Windows. Once again: use exact the same version as noted inside the Document MSC.Marc Release Guide. Restart your Computer again to make sure all environmental variables are updated in your system. . MSC.Marc Mentat 20xx . Now you may install MSC.Marc without any special considerations regarding Fortran compiling support. All necessary paths are set and detected automatically by Marc. .",
            "url": "https://adtzlr.github.io/blog/markdown/2018/02/06/FortranMarc.html",
            "relUrl": "/markdown/2018/02/06/FortranMarc.html",
            "date": " • Feb 6, 2018"
        }
        
    
  
    
        ,"post1": {
            "title": "Initial Release of Tensor Toolbox for Fortran",
            "content": "Introducing Tensor Toolbox for Fortran . Tensor Toolbox for Modern Fortran (ttb) is a Fortran module to add Tensor features to Fortran. It provides derived data types from general arrays for rank 2 and rank 4 tensors (and it’s symmetric variants). Computation of the deviatoric part, fourth-order identity tensor, dot product, double-dot product, etc. is available without constructing any loops by the user. For further information read the full post or have a look at the ttb-repository. . A short overview . Commercial FEM software packages often offer interfaces (user subroutines written in Fortran) for custom defined user materials like UMAT in Abaqus or HYPELA2 in MSC.Marc. Unlike other scientific programming languages like MATLAB or Python Fortran is not as comfortable to use when dealing with high level programming features of tensor manipulation. On the other hand it’s super fast - so why not combine the handy features from MATLAB or Python’s NumPy/Scipy with the speed of Fortran? That’s the reason why I started working on a simple but effective module called Tensor Toolbox for Modern Fortran. I adopted the idea to my needs from Naumann, C. (2016). . It provides the following basic operations for tensor calculus (all written in double precision real(kind=8)): . Dot Product C(i,j) = A(i,k) B(k,j) written as C = A*B or C = A.dot.B | Double Dot Product C = A(i,j) B(i,j) written as C = A**B or C = A.ddot.B | Dyadic Product C(i,j,k,l) = A(i,j) B(k,l) written as C = A.dya.B | Addition / Subtraction C(i,j) = A(i,j) + B(i,j) written as C = A+B or C = A.add.B | Multiplication and Divison by a Scalar C(i,j) = A(i,j) - B(i,j) written as C = A-B or C = A.sub.B | Deviatoric Part of Tensor dev(C) = C - tr(C)/3 * Eye written as dev(C) | Transpose and Permutation of indices B(i,j,k,l) = A(i,k,j,l) written as B = permute(A,1,3,2,4) | Assigment of a real-valued Scalar to all components of a Tensor A = 0.0 or A = 0.d0 | Assigment of a real-valued Array to a Tensor with matching dimensions A = B where B is an Array and A a Tensor | Rank 2 Identity tensor of input type Eye = identity2(Eye) with C = Eye*C | Rank 4 Identity tensor (symmetric variant) of input type I4 = identity4(Eye) with C = I4(Eye)**C or inv(C) = identitiy4(inv(C))**C | . Basic Usage . The most basic example on how to use this module is to download the module, put the ‘ttb’-Folder in your working directory and add two lines of code: . include &#39;ttb/ttb_library.f&#39; program script101_ttb use Tensor implicit none ! user code end program script101_ttb . The include &#39;ttb/ttb_library.f&#39; statement replaces the line with the content of the ttb-module. The first line in a program or subroutine is now a use Tensor statement. That’s it - now you’re ready to go. . Neo-Hookean Material . With the help of the Tensor module the Second Piola-Kirchhoff stress tensor S of a nearly-incompressible Neo-Hookean material model is basically a one-liner: . S = dev(det(F)**(-2./3.)*Eye*C)*inv(C)+p*det(F)*inv(C) . Sources . Naumann, C.: Chemisch-mechanisch gekoppelte Modellierung und Simulation oxidativer Alterungsvorgänge in Gummibauteilen (German). PhD thesis. Fakultät für Maschinenbau der Technischen Universität Chemnitz, 2016. .",
            "url": "https://adtzlr.github.io/blog/markdown/2017/11/26/TensorToolbox.html",
            "relUrl": "/markdown/2017/11/26/TensorToolbox.html",
            "date": " • Nov 26, 2017"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My Name is Andreas Dutzler and I’m a University Assistent at Graz University of Technology at the Institute of Structural Durability and Railway Technology in the area of mechanical engineering. . Research Information . In the area of computational engineering my research is focused on the mechanical description of elastomer components. Therefor I have to deal with a mathematically geometric exact description of kinematics in continuum mechanics. Up to now this investigation is limited to the case of isotropic hyperelasticity. (Some) main question are: What is (not) possible inside this framework? What are the consequences of material isotropy on work-conjugacy of stress and strain? And last but not least: What is strain? How does a generalized description of material isotropy affect the component characteristic cuvers of typical elastomer components? . Contact me . TUGrazonline . Researchgate .",
          "url": "https://adtzlr.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://adtzlr.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}